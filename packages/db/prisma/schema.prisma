// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id        String    @default(uuid())    @id
  email     String    @unique
  password  String
  name      String
  photo     String?
  rooms     Room[]
  chat      Chat[]
}

model Room{

  id          Int       @default(autoincrement())     @id
  slug        String    @unique
  createdAt   DateTime  @default(now())
  adminId     String
  admin       User      @relation(fields: [adminId],references: [id])   
  chat        Chat[]
}
// an user has many rooms but  an room has one admin the adminId refers to the "id" in the User table
//   an room can have many Chats

model Chat{
  id         Int     @default(autoincrement())     @id
  roomId     Int
  message    String
  userId     String
  room       Room   @relation(fields: [roomId], references: [id])
  user       User   @relation(fields: [userId], references: [id])
}

//  an room can have many chat but an chat can belong to only one room
//  an user can have many chats but an chat can belong to only one user

// the Chat has Two Relationship ie a chat belongs to an person and is sent in an room so 
// a chat will have assoicated roomId and UserId with it establishing two relationsips